(
(let scriptudf0 (String '@@
def f(key, input):
   for i in input:
      yield {
        'key': i.key,
        'value': i.value,
        'pass': 10
      }
@@))
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table0 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table0)
      (let core (RemoveSystemMembers core))
      (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) (Member row '"key")))) (Void) (Void) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) (Member row '"key")))) (ScriptUdf 'Python3 '"f" (CallableType '() '((StreamType (StructType '('"key" (DataType 'String)) '('"value" (DataType 'String)) '('"pass" (DataType 'Int32))))) '((DataType 'String)) '((StreamType (StructType '('"key" (DataType 'String)) '('"value" (DataType 'String)))) '"")) scriptudf0) (lambda '(row) (RemoveSystemMembers row)))))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
