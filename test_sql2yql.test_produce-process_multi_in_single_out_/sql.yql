(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (Configure! world (DataSource '"dq" '"$all") '"Attr" '"enabledqreplicate" '"1"))
(let subquerynode0 (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input0")))) (Void) '()))
  (let table0 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input0")))) (Void) '()))
  (let table1 (Right! x))
  (return '(world (block '(
    (let select (block '(
      (let inputRowsList (block '(
        (let src0 table0)
        (let src0 (RemoveSystemMembers src0))
        (let src1 (block '(
          (let select (block '(
            (let core table1)
            (let core (OrderedFilter core (lambda '(row) (Coalesce (">" (Member row '"key") (String '"100")) (Bool 'false)))))
            (let core (PersistableRepr (block '(
              (let projectCoreType (TypeOf core))
              (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
                (let res row)
                (return res)
              ))) '()))))
              (return core)
            ))))
            (return core)
          )))
          (let select (RemoveSystemMembers select))
          (return select)
        )))
        (let src1 (RemoveSystemMembers src1))
        (return (Mux '(src0 src1)))
      )))
      (let core (SqlProcess (lambda '(stream) (PartitionByKey stream (lambda '(item) (Way item)) (Void) (Void) (lambda '(listOfPairs) (FlatMap listOfPairs (lambda '(pair) (Map (Nth pair '1) (lambda '(elem) (AsStruct '('cnt (Visit elem '0 (lambda '(v) (Member v 'subkey)) '1 (lambda '(v) (Member v 'subkey)))) '('src (Nth pair '0)))))))))) (RemoveSystemMembers inputRowsList) '0))
      (let core (AutoDemux (PersistableRepr core)))
      (return core)
    )))
    (return select)
  ))))
)))
(let world (Nth subquerynode0 '0))
(let subquery0 (Nth subquerynode0 '1))
(let world (block '(
  (let output (block '(
    (let select (block '(
      (let core subquery0)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
