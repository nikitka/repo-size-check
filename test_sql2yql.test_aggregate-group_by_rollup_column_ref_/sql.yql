(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let subquerynode0 (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table0 (Right! x))
  (return '(world (block '(
    (let select (block '(
      (let core table0)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"kk" (lambda '(row) (block '(
          (let res (Coalesce (SafeCast (Member row '"key") (DataType 'Int32)) (Int32 '"0")))
          (return res)
        )))) (SqlProjectItem projectCoreType '"sk" (lambda '(row) (block '(
          (let res (Coalesce (SafeCast (Member row '"subkey") (DataType 'Int32)) (Int32 '"0")))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  ))))
)))
(let world (Nth subquerynode0 '0))
(let subquery0 (Nth subquerynode0 '1))
(let world (block '(
  (let output (block '(
    (let select (block '(
      (let composite subquery0)
      (let composite (OrderedFilter composite (lambda '(row) (Coalesce (SqlIn '((Int32 '"23") (Int32 '"37") (Int32 '"75") (Int32 '"150")) (Member row '"sk") '('('warnNoAnsi))) (Bool 'false)))))
      (return (UnionAll (block '(
        (let core composite)
        (let origcore core)
        (let core (AssumeColumnOrderPartial (Aggregate core '('"kk" '"sk") '('('Count0 (AggApply 'count_all (ListItemType (TypeOf core)) (lambda '(row) (PersistableRepr (Void)))))) '()) '('"kk" '"sk")))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let addCompositTerms (lambda '(row) (block '(
            (return row)
          ))))
          (let core (SqlProject core '((SqlProjectItem projectCoreType '"kk" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row '"kk"))
            (return res)
          )))) (SqlProjectItem projectCoreType '"sk" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row '"sk"))
            (return res)
          )))) (SqlProjectItem projectCoreType '"total_count" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row 'Count0))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      )) (block '(
        (let core composite)
        (let origcore core)
        (let core (AssumeColumnOrderPartial (Aggregate core '('"kk") '('('Count0 (AggApply 'count_all (ListItemType (TypeOf core)) (lambda '(row) (PersistableRepr (Void)))))) '()) '('"kk")))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let addCompositTerms (lambda '(row) (block '(
            (let row (AddMember row '"sk" (Nothing (MatchType (StructMemberType (ListItemType (TypeOf origcore)) 'sk) 'Optional (lambda '(item) item) (lambda '(item) (OptionalType item))))))
            (return row)
          ))))
          (let core (SqlProject core '((SqlProjectItem projectCoreType '"kk" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row '"kk"))
            (return res)
          )))) (SqlProjectItem projectCoreType '"sk" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row '"sk"))
            (return res)
          )))) (SqlProjectItem projectCoreType '"total_count" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row 'Count0))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      )) (block '(
        (let core composite)
        (let origcore core)
        (let core (AssumeColumnOrderPartial (Aggregate core '() '('('Count0 (AggApply 'count_all (ListItemType (TypeOf core)) (lambda '(row) (PersistableRepr (Void)))))) '()) '()))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let addCompositTerms (lambda '(row) (block '(
            (let row (AddMember row '"kk" (Nothing (MatchType (StructMemberType (ListItemType (TypeOf origcore)) 'kk) 'Optional (lambda '(item) item) (lambda '(item) (OptionalType item))))))
            (let row (AddMember row '"sk" (Nothing (MatchType (StructMemberType (ListItemType (TypeOf origcore)) 'sk) 'Optional (lambda '(item) item) (lambda '(item) (OptionalType item))))))
            (return row)
          ))))
          (let core (SqlProject core '((SqlProjectItem projectCoreType '"kk" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row '"kk"))
            (return res)
          )))) (SqlProjectItem projectCoreType '"sk" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row '"sk"))
            (return res)
          )))) (SqlProjectItem projectCoreType '"total_count" (lambda '(row) (block '(
            (let row (Apply addCompositTerms row))
            (let res (Member row 'Count0))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      ))))
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"kk")) (PersistableRepr (Member row '"sk")) (PersistableRepr (Member row '"total_count"))))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"kk" '"sk" '"total_count")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
