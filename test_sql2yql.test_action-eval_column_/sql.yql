(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let output (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
          (let res (SqlAccess 'struct (AsStructUnordered '('"foo" (String '"1")) '('"bar" (Int32 '"2"))) (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"foo")))) (DataType 'String))) '('"yson_strict" '"yson_fast")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"column0")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table0 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table0)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"key" (lambda '(row) (block '(
          (let res (Member row '"key"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"column1" (lambda '(row) (block '(
          (let res (Member row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String)))))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (Member row '"key")))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"key" '"column1")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table1)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"key" (lambda '(row) (block '(
          (let res (Member row '"key"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"column1" (lambda '(row) (block '(
          (let res (SqlAccess 'struct (RemoveSystemMembers row) (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))) '('"yson_strict" '"yson_fast")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (Member row '"key")))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"key" '"column1")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table2 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table2)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (Member row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table3 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table3)
      (let core (FlatMap core (lambda '(row) (AsList (AddMember (ForceRemoveMember row 'x) 'x (Member row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String)))))))))
      (let core (Filter (AssumeColumnOrderPartial (Aggregate core '('"x") '('('Min0 (AggApply 'min (ListItemType (TypeOf core)) (lambda '(row) (PersistableRepr (Member row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"key")))) (DataType 'String)))))))) '('Count0 (AggApply 'count_all (ListItemType (TypeOf core)) (lambda '(row) (PersistableRepr (Void)))))) '()) '('"x")) (lambda '(row) (Coalesce ("!=" (Member row 'Min0) (String '"")) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (SqlProject core '((SqlProjectItem projectCoreType '"x" (lambda '(row) (block '(
          (let res (Member row '"x"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"column1" (lambda '(row) (block '(
          (let res (Member row 'Count0))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (Member row '"x")))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"x" '"column1")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table4 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table5 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (OrderedMap (EquiJoin '((RemoveSystemMembers (OrderedMap table4 (lambda '(row) (block '(
        (let row (AddMember row '"_equijoin_column_0" (Member row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))))))
        (return row)
      ))))) '"a") '((RemoveSystemMembers (OrderedMap table5 (lambda '(row) (block '(
        (let row (AddMember row '"_equijoin_column_1" (Member row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))))))
        (return row)
      ))))) '"b") '('Inner '"a" '"b" '('"a" '"_equijoin_column_0") '('"b" '"_equijoin_column_1") '()) '()) (lambda '(row) (block '(
        (let row (ForceRemoveMember row '"a._equijoin_column_0"))
        (let row (ForceRemoveMember row '"b._equijoin_column_1"))
        (return row)
      )))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"x" (lambda '(row) (block '(
          (let res (SqlColumn row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))) '"a"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"y" (lambda '(row) (block '(
          (let res (SqlColumn row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"key")))) (DataType 'String))) '"b"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (SqlColumn row '"x")))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"x" '"y")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table6 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table7 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (OrderedMap (EquiJoin '((RemoveSystemMembers (OrderedMap table6 (lambda '(row) (block '(
        (let row (AddMember row '"_equijoin_column_0" (Member row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))))))
        (return row)
      ))))) '"a") '((RemoveSystemMembers (OrderedMap table7 (lambda '(row) (block '(
        (let row (AddMember row '"_equijoin_column_1" (Member row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))))))
        (return row)
      ))))) '"b") '('Inner '"a" '"b" '('"a" '"_equijoin_column_0") '('"b" '"_equijoin_column_1") '()) '()) (lambda '(row) (block '(
        (let row (ForceRemoveMember row '"a._equijoin_column_0"))
        (let row (ForceRemoveMember row '"b._equijoin_column_1"))
        (return row)
      )))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"x" (lambda '(row) (block '(
          (let res (SqlColumn row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))) '"a"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"y" (lambda '(row) (block '(
          (let res (SqlColumn row (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"key")))) (DataType 'String))) '"b"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (SqlColumn row '"x")))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"x" '"y")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table8 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table8)
      (let core (OrderedFlatMap core (lambda '(row) (AsList (AddMember row 'p (SqlAccess 'struct (RemoveSystemMembers row) (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"key")))) (DataType 'String))) '('"yson_strict" '"yson_fast")))))))
      (let core (CalcOverWindow core '('"p") (SortTraits (TypeOf core) (Bool 'true) (lambda '(row) (PersistableRepr (SqlAccess 'struct (RemoveSystemMembers row) (EvaluateAtom (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"value")))) (DataType 'String))) '('"yson_strict" '"yson_fast"))))) '((WinOnRows '('('begin (Void)) '('end (Int32 '0))) '('_yql_Lag0 (Lag (TypeOf core) (lambda '(row) (Member row '"value"))))))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"p" (lambda '(row) (block '(
          (let res (Member row '"p"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"lag" (lambda '(row) (block '(
          (let res (Member row '_yql_Lag0))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"p")) (PersistableRepr (Member row '"value"))))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"p" '"value" '"lag")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
