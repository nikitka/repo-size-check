(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (Configure! world (DataSource '"yt" '"$all") '"Attr" '"usenativedescsort" '""))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input1")))) (Void) '()))
  (let table0 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table0)
          (let core (RemoveSystemMembers core))
          (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (Bool 'false) (lambda '(row) (SqlExtractKey row (lambda '(row) (PersistableRepr (Member row '"value"))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (lambda '(key stream) (AsStruct '('key key) '('summ (Collect (Condense stream (Nothing (OptionalType (DataType 'String))) (lambda '(item state) (Bool 'False)) (lambda '(item state) (Coalesce state (Just item)))))))) (lambda '(row) (Member row '"value")))))))
          (return core)
        )))
        (return select)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"summ"))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input1")))) (Void) '()))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table1)
          (let core (RemoveSystemMembers core))
          (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) (Member row '"key")))) '((Bool 'false) (Bool 'false)) (lambda '(row) (SqlExtractKey row (lambda '(row) '((PersistableRepr (Member row '"subkey")) (PersistableRepr (Member row '"value")))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) (Member row '"key")))) (lambda '(key stream) (AsStruct '('key key) '('summ (Collect (Condense stream (Nothing (OptionalType (DataType 'String))) (lambda '(item state) (Bool 'False)) (lambda '(item state) (Coalesce state (Just item)))))))) (lambda '(row) (Member row '"value")))))))
          (return core)
        )))
        (return select)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"summ"))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input1")))) (Void) '()))
  (let table2 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table2)
          (let core (RemoveSystemMembers core))
          (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (Bool 'true) (lambda '(row) (SqlExtractKey row (lambda '(row) (PersistableRepr (Member row '"value"))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (lambda '(key stream) (AsStruct '('key key) '('summ (Collect (Condense stream (Nothing (OptionalType (DataType 'String))) (lambda '(item state) (Bool 'False)) (lambda '(item state) (Coalesce state (Just item)))))))) (lambda '(row) (Member row '"value")))))))
          (return core)
        )))
        (return select)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"summ"))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input1"))) (Key '('table (String '"Input2")))) (Void) '()))
  (let table3 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table3)
          (let core (RemoveSystemMembers core))
          (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (Bool 'false) (lambda '(row) (SqlExtractKey row (lambda '(row) (PersistableRepr (Member row '"value"))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (lambda '(key stream) (AsStruct '('key key) '('summ (Collect (Condense stream (Nothing (OptionalType (DataType 'String))) (lambda '(item state) (Bool 'False)) (lambda '(item state) (Coalesce state (Just item)))))))) (lambda '(row) (Member row '"value")))))))
          (return core)
        )))
        (return select)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"summ"))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
