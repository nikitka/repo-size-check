(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let subquerynode0 (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table0 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table1 (Right! x))
  (return '(world (block '(
    (let select (block '(
      (let core (block '(
        (let src0 table0)
        (let src0 (RemoveSystemMembers src0))
        (let src1 table1)
        (let src1 (RemoveSystemMembers src1))
        (return (Mux '(src0 src1)))
      )))
      (let core (RemoveSystemMembers core))
      (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) (Member row '"key")))) '((Bool 'true) (Bool 'true)) (lambda '(row) (SqlExtractKey row (lambda '(row) '((PersistableRepr (Member row '"value")) (PersistableRepr (Concat (Member row '"key") (Member row '"subkey"))))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) (Member row '"key")))) (lambda '(key stream) (PartitionByKey stream (lambda '(item) (Way item)) (Void) (Void) (lambda '(listOfPairs) (FlatMap listOfPairs (lambda '(pair) (Just (AsStruct '('key key) '('src (Nth pair '0)) '('cnt (Length (ForwardList (Nth pair '1))))))))))) (lambda '(row) (RemoveSystemMembers row)))))))
      (return core)
    )))
    (return select)
  ))))
)))
(let world (Nth subquerynode0 '0))
(let subquery0 (Nth subquerynode0 '1))
(let world (block '(
  (let output (block '(
    (let select (block '(
      (let core subquery0)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"key" (lambda '(row) (block '(
          (let res (Member row '"key"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"src" (lambda '(row) (block '(
          (let res (Member row '"src"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"cnt" (lambda '(row) (block '(
          (let res (Member row '"cnt"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"src")) (PersistableRepr (Member row '"cnt"))))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"key" '"src" '"cnt")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
