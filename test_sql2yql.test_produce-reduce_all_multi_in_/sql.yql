(
(let scriptudf0 (String '@@
import functools
def Len(stream):
    sums = [functools.reduce(lambda x,y: x + int(y[1].value), pair[1], 0) for pair in stream]
    return {"sumByAllVal":functools.reduce(lambda x,y: x + y, sums, 0)}
@@))
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input1")))) (Void) '()))
  (let table0 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input1")))) (Void) '()))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let src0 table0)
        (let src0 (RemoveSystemMembers src0))
        (let src1 table1)
        (let src1 (RemoveSystemMembers src1))
        (return (Mux '(src0 src1)))
      )))
      (let core (RemoveSystemMembers core))
      (let core (AutoDemux (PartitionByKey core (lambda '(row) (SqlExtractKey row (lambda '(row) (Member row '"key")))) (Void) (Void) (lambda '(partitionStream) (SqlReduce partitionStream 'byAll (ScriptUdf 'Python3 '"Len" (CallableType '() '((StructType '('"sumByAllVal" (DataType 'Uint32)))) '((StreamType (TupleType (DataType 'String) (StreamType (VariantType (TupleType (StructType '('"key" (DataType 'String)) '('"subkey" (DataType 'String)) '('"value" (DataType 'String))) (StructType '('"key" (DataType 'String)) '('"subkey" (DataType 'String)) '('"value" (DataType 'String)))))))))) scriptudf0) (Map partitionStream (lambda '(keyPair) '((Nth keyPair '0) (Map (Nth keyPair '1) (lambda '(row) (RemoveSystemMembers row)))))))))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
