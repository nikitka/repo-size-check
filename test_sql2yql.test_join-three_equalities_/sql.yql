(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input1")))) (Void) '()))
  (let table0 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input2")))) (Void) '()))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (OrderedMap (EquiJoin '((RemoveSystemMembers (OrderedMap table0 (lambda '(row) (block '(
        (let row (AddMember row '"_equijoin_column_0" ("+" (SafeCast (Member row '"subkey") (DataType 'Int32)) (Int32 '"1"))))
        (return row)
      ))))) '"A") '((RemoveSystemMembers (OrderedMap table1 (lambda '(row) (block '(
        (let row (AddMember row '"_equijoin_column_1" (SafeCast (Member row '"subkey") (DataType 'Int32))))
        (return row)
      ))))) '"B") '('Inner '"A" '"B" '('"A" '"key" '"A" '"_equijoin_column_0" '"A" '"value") '('"B" '"key" '"B" '"_equijoin_column_1" '"B" '"value") '()) '()) (lambda '(row) (block '(
        (let row (ForceRemoveMember row '"A._equijoin_column_0"))
        (let row (ForceRemoveMember row '"B._equijoin_column_1"))
        (return row)
      )))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (SqlColumn row '"key" '"A")))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
