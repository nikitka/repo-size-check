(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"T")))) (Void) '()))
  (let table0 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table0)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"lax $.where") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"T")))) (Void) '()))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table1)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"strict $.where") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"T")))) (Void) '()))
  (let table2 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table2)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"strict $.where") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"T")))) (Void) '()))
  (let table3 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table3)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"strict $.friends[*].rank") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Filter1")))) (Void) '()))
  (let table4 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table4)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"lax $ ? (@.pay/@.hours > 9)") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Filter1")))) (Void) '()))
  (let table5 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table5)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"strict $ ? (@.pay/@.hours > 9)") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Filter2")))) (Void) '()))
  (let table6 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table6)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"lax $ ? (@.pay/@.hours > 9)") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Filter2")))) (Void) '()))
  (let table7 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table7)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"strict $ ? (@.pay/@.hours > 9)") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Filter2")))) (Void) '()))
  (let table8 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table8)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"lax $ ? (@.hours > 9)") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Filter2")))) (Void) '()))
  (let table9 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table9)
      (let core (OrderedFilter core (lambda '(row) (Coalesce (JsonExists (Member row '"J") (Utf8 '"strict $ ? (@.hours > 9)") (JsonVariables) (Just (Bool '"false"))) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"K" (lambda '(row) (block '(
          (let res (Member row '"K"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"K")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
