(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let subquerynode0 (block '(
  (return '(world (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
          (let res (Concat (SafeCast (SqlCall '"Unicode.ToUpper" '((PositionalArgs (Utf8 '"o")))) (DataType 'String)) (String '"utpu")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  ))))
)))
(let world (Nth subquerynode0 '0))
(let subquery0 (Nth subquerynode0 '1))
(let subquerynode1 (block '(
  (return '(world (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
          (let res (Concat (SafeCast (SqlCall '"Unicode.ToUpper" '((PositionalArgs (Utf8 '"i")))) (DataType 'String)) (String '"npu")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  ))))
)))
(let world (Nth subquerynode1 '0))
(let subquery1 (Nth subquerynode1 '1))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String (EvaluateAtom (Concat (Member (SqlAccess 'dict (Take subquery1 (Uint64 '1)) (Uint64 '0)) 'column0) (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"T")))) (DataType 'String)))))))) (Void) '()))
  (let table2 (Right! x))
  (let values (block '(
    (let select (block '(
      (let core table2)
      (let core (OrderedFilter core (lambda '(row) (Coalesce ("<" (Member row '"key") (String '"100")) (Bool 'false)))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"key" (lambda '(row) (block '(
          (let res (Member row '"key"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"subkey" (lambda '(row) (block '(
          (let res (String '""))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value" (lambda '(row) (block '(
          (let res (Concat (String '"value:") (Member row '"value")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (Member row '"key")))))
    (return select)
  )))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (Key '('table (String (EvaluateAtom (Concat (Member (SqlAccess 'dict (Take subquery0 (Uint64 '1)) (Uint64 '0)) 'column0) (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Utf8 '"T")))) (DataType 'String))))))) values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
