(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"Text" (lambda '(row) (block '(
          (let res (String '"1"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"Attachments" (lambda '(row) (block '(
          (let res (AsList (String '"a") (String '"b")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"a") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"a") (Void) '()))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table1)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"x" (lambda '(row) (block '(
          (let row (RemoveMember row 'Text))
          (let row (RemoveMember row 'Attachments))
          (let res row)
          (return res)
        ))) '()) (SqlProjectItem projectCoreType '"Text" (lambda '(row) (block '(
          (let res (String '""))
          (return res)
        )))) (SqlProjectItem projectCoreType '"Attachments" (lambda '(row) (block '(
          (let res (List (ListType (TypeOf (Member row '"Attachments")))))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
