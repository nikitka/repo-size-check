(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (ToList (AsList (AsStruct '('"a" (Int32 '"1"))) (AsStruct '('"a" (Int32 '"2"))) (AsStruct '('"a" (Int32 '"1"))))))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"a") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"a") (Void) '()))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table1)
      (let core (FlatMap core (lambda '(row) (AsList (AddMember (ForceRemoveMember row '_yql_preagg_AggregateBy0) '_yql_preagg_AggregateBy0 (SafeCast (SqlCall '"Unicode.ToLower" '((PositionalArgs (Concat (SafeCast (Member row '"a") (DataType 'Utf8)) (Utf8 '"00"))))) (DataType 'Int32)))))))
      (let core (AssumeColumnOrderPartial (Aggregate core '() '('('AggregateBy0 (Apply (lambda '(type extractor) (Apply (bind aggregate_module '"udaf_traits_factory") (ListType type) extractor (lambda '(value parent) (NamedApply (lambda '("$_item" "$_parent") (block '(
        (return (Int32 '"1"))
      ))) '(value) (AsStruct) (DependsOn parent))) (lambda '(value state parent) (NamedApply (lambda '("$state" "$_item" "$_parent") (block '(
        (return ("+MayWarn" (Int32 '"1") "$state"))
      ))) '(state value) (AsStruct) (DependsOn parent))) (lambda '(one two) (IfType (lambda '("$state1" "$state2") (block '(
        (return ("+MayWarn" "$state1" "$state2"))
      ))) (NullType) (lambda '() (Void)) (lambda '() (Apply (lambda '("$state1" "$state2") (block '(
        (return ("+MayWarn" "$state1" "$state2"))
      ))) one two)))) (lambda '(state) (Apply (lambda '("$state") (block '(
        (return "$state")
      ))) state)) (lambda '(state) (Apply (lambda '("$state") (block '(
        (return "$state")
      ))) state)) (lambda '(state) (Apply (lambda '("$state") (block '(
        (return "$state")
      ))) state)) (Int32 '"0"))) (ListItemType (ListType (StructMemberType (ListItemType (TypeOf core)) '"_yql_preagg_AggregateBy0"))) (lambda '(row) (PersistableRepr row))) '"_yql_preagg_AggregateBy0")) '()) '()))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (SqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
          (let res (Member row 'AggregateBy0))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"column0")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
