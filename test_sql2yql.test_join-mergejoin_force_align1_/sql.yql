(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (Configure! world (DataSource '"yt" '"$all") '"Attr" '"joinmergetableslimit" '"100"))
(let world (Configure! world (DataSource '"yt" '"$all") '"Attr" '"joinmergeforce" '""))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"k1" (lambda '(row) (block '(
          (let res (Int32 '"1"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"v1" (lambda '(row) (block '(
          (let res (Int32 '"10"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"t1") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"k2" (lambda '(row) (block '(
          (let res (Uint32 '"1"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"v2" (lambda '(row) (block '(
          (let res (Int32 '"100"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"t2") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"k3" (lambda '(row) (block '(
          (let res (Uint16 '"1"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"v3" (lambda '(row) (block '(
          (let res (Int32 '"1000"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"t3") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"k4" (lambda '(row) (block '(
          (let res (Int16 '"1"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"v4" (lambda '(row) (block '(
          (let res (Int32 '"10000"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"t4") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"t1") (Void) '()))
  (let table4 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"t3") (Void) '()))
  (let table5 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"t2") (Void) '()))
  (let table6 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"t4") (Void) '()))
  (let table7 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (EquiJoin '((RemoveSystemMembers (block '(
        (let select (block '(
          (let core (EquiJoin '((RemoveSystemMembers table4) '"a") '((RemoveSystemMembers table5) '"c") '('Inner '"a" '"c" '('"a" '"k1") '('"c" '"k3") '()) '()))
          (let core (PersistableRepr (block '(
            (let projectCoreType (TypeOf core))
            (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
              (let res (DivePrefixMembers row '('"a." '"c.")))
              (return res)
            ))) '('('divePrefix '('"a." '"c.")))))))
            (return core)
          ))))
          (return core)
        )))
        (let select (RemoveSystemMembers select))
        (return select)
      ))) '"ac") '((RemoveSystemMembers (block '(
        (let select (block '(
          (let core (EquiJoin '((RemoveSystemMembers table6) '"b") '((RemoveSystemMembers table7) '"d") '('Inner '"b" '"d" '('"b" '"k2") '('"d" '"k4") '()) '()))
          (let core (PersistableRepr (block '(
            (let projectCoreType (TypeOf core))
            (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
              (let res (DivePrefixMembers row '('"b." '"d.")))
              (return res)
            ))) '('('divePrefix '('"b." '"d.")))))))
            (return core)
          ))))
          (return core)
        )))
        (let select (RemoveSystemMembers select))
        (return select)
      ))) '"bd") '('Inner '"ac" '"bd" '('"ac" '"k1" '"ac" '"k3") '('"bd" '"k2" '"bd" '"k4") '()) '()))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res (DivePrefixMembers row '('"ac." '"bd.")))
          (return res)
        ))) '('('divePrefix '('"ac." '"bd.")))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
