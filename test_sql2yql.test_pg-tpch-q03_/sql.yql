(
(let world (Configure! world (DataSource 'config) 'OrderedColumns))
(let read0 (Read! world (DataSource '"yt" '"plato") (Key '('table (String '"customer"))) (Void) '()))
(let world (Left! read0))
(let read1 (Read! world (DataSource '"yt" '"plato") (Key '('table (String '"orders"))) (Void) '()))
(let world (Left! read1))
(let read2 (Read! world (DataSource '"yt" '"plato") (Key '('table (String '"lineitem"))) (Void) '()))
(let world (Left! read2))
(let output (PgSelect '('('set_items '((PgSetItem '('('result '((PgResultItem '"l_orderkey" (Void) (lambda '() (PgColumnRef '"l_orderkey"))) (PgResultItem '"revenue" (Void) (lambda '() (PgAgg '"sum" '() (PgOp '"*" (PgColumnRef '"l_extendedprice") (PgOp '"-" (PgCast (PgConst '1 (PgType 'int4)) (PgType '"numeric")) (PgColumnRef '"l_discount")))))) (PgResultItem '"o_orderdate" (Void) (lambda '() (PgColumnRef '"o_orderdate"))) (PgResultItem '"o_shippriority" (Void) (lambda '() (PgColumnRef '"o_shippriority"))))) '('from '('((Right! read0) '"customer" '()) '((Right! read1) '"orders" '()) '((Right! read2) '"lineitem" '()))) '('join_ops '('() '() '())) '('where (PgWhere (Void) (lambda '() (PgAnd (PgAnd (PgAnd (PgAnd (PgOp '"=" (PgColumnRef '"c_mktsegment") (PgConst '"BUILDING" (PgType 'text))) (PgOp '"=" (PgColumnRef '"c_custkey") (PgColumnRef '"o_custkey"))) (PgOp '"=" (PgColumnRef '"l_orderkey") (PgColumnRef '"o_orderkey"))) (PgOp '"<" (PgColumnRef '"o_orderdate") (PgCast (PgConst '"1995-03-15" (PgType 'text)) (PgType '"date")))) (PgOp '">" (PgColumnRef '"l_shipdate") (PgCast (PgConst '"1995-03-15" (PgType 'text)) (PgType '"date"))))))) '('group_by '((PgGroup (Void) (lambda '() (PgColumnRef '"l_orderkey"))) (PgGroup (Void) (lambda '() (PgColumnRef '"o_orderdate"))) (PgGroup (Void) (lambda '() (PgColumnRef '"o_shippriority"))))) '('sort '((PgSort (Void) (lambda '() (PgColumnRef '"revenue")) 'desc) (PgSort (Void) (lambda '() (PgColumnRef '"o_orderdate")) 'asc))))))) '('set_ops '('push)) '('limit (PgConst '10 (PgType 'int4))))))
(let result_sink (DataSink 'result))
(let world (Write! world result_sink (Key) output '('('type) '('autoref))))
(let world (Commit! world result_sink))
(let world (CommitAll! world))
(return world)
)
