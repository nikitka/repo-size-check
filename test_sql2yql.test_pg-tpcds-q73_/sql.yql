(
(let world (Configure! world (DataSource 'config) 'OrderedColumns))
(let read0 (Read! world (DataSource '"yt" '"plato") (Key '('table (String '"store_sales"))) (Void) '()))
(let world (Left! read0))
(let read1 (Read! world (DataSource '"yt" '"plato") (Key '('table (String '"date_dim"))) (Void) '()))
(let world (Left! read1))
(let read2 (Read! world (DataSource '"yt" '"plato") (Key '('table (String '"store"))) (Void) '()))
(let world (Left! read2))
(let read3 (Read! world (DataSource '"yt" '"plato") (Key '('table (String '"household_demographics"))) (Void) '()))
(let world (Left! read3))
(let read4 (Read! world (DataSource '"yt" '"plato") (Key '('table (String '"customer"))) (Void) '()))
(let world (Left! read4))
(let output (PgSelect '('('set_items '((PgSetItem '('('result '((PgResultItem '"c_last_name" (Void) (lambda '() (PgColumnRef '"c_last_name"))) (PgResultItem '"c_first_name" (Void) (lambda '() (PgColumnRef '"c_first_name"))) (PgResultItem '"c_salutation" (Void) (lambda '() (PgColumnRef '"c_salutation"))) (PgResultItem '"c_preferred_cust_flag" (Void) (lambda '() (PgColumnRef '"c_preferred_cust_flag"))) (PgResultItem '"ss_ticket_number" (Void) (lambda '() (PgColumnRef '"ss_ticket_number"))) (PgResultItem '"cnt" (Void) (lambda '() (PgColumnRef '"cnt"))))) '('from '('((PgSelect '('('set_items '((PgSetItem '('('result '((PgResultItem '"ss_ticket_number" (Void) (lambda '() (PgColumnRef '"ss_ticket_number"))) (PgResultItem '"ss_customer_sk" (Void) (lambda '() (PgColumnRef '"ss_customer_sk"))) (PgResultItem '"cnt" (Void) (lambda '() (PgAgg '"count" '()))))) '('from '('((Right! read0) '"store_sales" '()) '((Right! read1) '"date_dim" '()) '((Right! read2) '"store" '()) '((Right! read3) '"household_demographics" '()))) '('join_ops '('() '() '() '())) '('where (PgWhere (Void) (lambda '() (PgAnd (PgAnd (PgAnd (PgAnd (PgAnd (PgAnd (PgAnd (PgAnd (PgOp '"=" (PgColumnRef '"store_sales" '"ss_sold_date_sk") (PgColumnRef '"date_dim" '"d_date_sk")) (PgOp '"=" (PgColumnRef '"store_sales" '"ss_store_sk") (PgColumnRef '"store" '"s_store_sk"))) (PgOp '"=" (PgColumnRef '"store_sales" '"ss_hdemo_sk") (PgColumnRef '"household_demographics" '"hd_demo_sk"))) (PgBetween (PgColumnRef '"date_dim" '"d_dom") (PgConst '1 (PgType 'int4)) (PgConst '2 (PgType 'int4)))) (PgOr (PgOp '"=" (PgColumnRef '"household_demographics" '"hd_buy_potential") (PgConst '">10000" (PgType 'text))) (PgOp '"=" (PgColumnRef '"household_demographics" '"hd_buy_potential") (PgConst '"Unknown" (PgType 'text))))) (PgOp '">" (PgColumnRef '"household_demographics" '"hd_vehicle_count") (PgConst '0 (PgType 'int4)))) (PgOp '">" (If (Coalesce (FromPg (PgOp '">" (PgColumnRef '"household_demographics" '"hd_vehicle_count") (PgConst '0 (PgType 'int4)))) (Bool 'false)) (PgOp '"/" (PgColumnRef '"household_demographics" '"hd_dep_count") (PgColumnRef '"household_demographics" '"hd_vehicle_count")) (PgCast (PgCast (Null) (PgType 'unknown)) (PgType '"int4"))) (PgConst '1 (PgType 'int4)))) (PgIn (PgColumnRef '"date_dim" '"d_year") (AsList (PgConst '1998 (PgType 'int4)) (PgOp '"+" (PgConst '1998 (PgType 'int4)) (PgConst '1 (PgType 'int4))) (PgOp '"+" (PgConst '1998 (PgType 'int4)) (PgConst '2 (PgType 'int4)))))) (PgIn (PgColumnRef '"store" '"s_county") (AsList (PgConst '"Williamson County" (PgType 'text)) (PgConst '"Williamson County" (PgType 'text)) (PgConst '"Williamson County" (PgType 'text)) (PgConst '"Williamson County" (PgType 'text)))))))) '('group_by '((PgGroup (Void) (lambda '() (PgColumnRef '"ss_ticket_number"))) (PgGroup (Void) (lambda '() (PgColumnRef '"ss_customer_sk"))))))))) '('set_ops '('push)))) '"dj" '()) '((Right! read4) '"customer" '()))) '('join_ops '('() '())) '('where (PgWhere (Void) (lambda '() (PgAnd (PgOp '"=" (PgColumnRef '"ss_customer_sk") (PgColumnRef '"c_customer_sk")) (PgBetween (PgColumnRef '"cnt") (PgCast (PgConst '1 (PgType 'int4)) (PgType '"int8")) (PgCast (PgConst '5 (PgType 'int4)) (PgType '"int8"))))))) '('sort '((PgSort (Void) (lambda '() (PgColumnRef '"cnt")) 'desc) (PgSort (Void) (lambda '() (PgColumnRef '"c_last_name")) 'asc))))))) '('set_ops '('push)))))
(let result_sink (DataSink 'result))
(let world (Write! world result_sink (Key) output '('('type) '('autoref))))
(let world (Commit! world result_sink))
(let world (CommitAll! world))
(return world)
)
