(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table0 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (EquiJoin '((RemoveSystemMembers table0) '"t1") '((RemoveSystemMembers table1) '"t2") '('Inner '"t1" '"t2" '('"t1" '"key") '('"t2" '"subkey") '()) '()))
      (let core (FlatMap core (lambda '(row) (AsList (AddMember (ForceRemoveMember row 'kk) 'kk (SqlColumn row '"key" '"t1"))))))
      (let core (AssumeColumnOrderPartial (Aggregate core '('"kk") '('('AggregateList0 (Apply (bind aggregate_module '"list2_traits_factory") (TypeOf core) (lambda '(row) (SqlColumn row '"key" '"t2")) (Uint64 '0)))) '()) '('"kk")))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (SqlProject core '((SqlProjectItem projectCoreType '"kk" (lambda '(row) (block '(
          (let res (Member row '"kk"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"" (lambda '(row) (block '(
          (let res (ListSort (Member row 'AggregateList0) (Bool 'true) (lambda '(arg) (block '(
            (return arg)
          )))))
          (return res)
        ))) '('('autoName))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (SqlColumn row '"kk")))))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('columns '('"kk" '('auto))))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
