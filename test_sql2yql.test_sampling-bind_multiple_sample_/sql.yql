(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let subquerynode0 (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table0 (Right! x))
  (return '(world (block '(
    (let select (block '(
      (let core table0)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  ))))
)))
(let world (Nth subquerynode0 '0))
(let subquery0 (Nth subquerynode0 '1))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (block '(
        (let subquery0 (OrderedFlatMap subquery0 (lambda '(row) (block '(
          (let res (OptionalIf (< (Random (DependsOn row)) (/ (Coalesce (SafeCast (Ensure (Ensure (Int32 '"100") (>= (Int32 '"100") (Double '0)) (String '"Expected sampling rate to be nonnegative")) (<= (Ensure (Int32 '"100") (>= (Int32 '"100") (Double '0)) (String '"Expected sampling rate to be nonnegative")) (Double '100)) (String '"Sampling rate is over 100%")) (DataType 'Double)) (Double '0)) (Double '100))) row))
          (return res)
        )))))
        (return subquery0)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"tmp") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (block '(
        (let subquery0 (OrderedFlatMap subquery0 (lambda '(row) (block '(
          (let res (OptionalIf (< (Random (DependsOn row)) (/ (Coalesce (SafeCast (Ensure (Ensure (Int32 '"50") (>= (Int32 '"50") (Double '0)) (String '"Expected sampling rate to be nonnegative")) (<= (Ensure (Int32 '"50") (>= (Int32 '"50") (Double '0)) (String '"Expected sampling rate to be nonnegative")) (Double '100)) (String '"Sampling rate is over 100%")) (DataType 'Double)) (Double '0)) (Double '100))) row))
          (return res)
        )))))
        (return subquery0)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"tmp") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"tmp") (Void) '()))
  (let table5 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table5)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
