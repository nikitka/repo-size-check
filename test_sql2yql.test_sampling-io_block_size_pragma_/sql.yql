(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (Configure! world (DataSource '"yt" '"$all") '"Attr" '"samplingioblocksize" '"32M"))
(let world (EvaluateFor! world (EvaluateExpr (ListFromRange (Int32 '"0") (Int32 '"10"))) (lambda '(world "$_i") (block '(
  (let world (block '(
    (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
    (let table1 (Right! x))
    (let values (block '(
      (let select (block '(
        (let core table1)
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
            (let res row)
            (return res)
          ))) '()))))
          (return core)
        ))))
        (return core)
      )))
      (let select (RemoveSystemMembers select))
      (return select)
    )))
    (let values (Unordered values))
    (let world (block '(
      (let sink (DataSink '"yt" '"plato"))
      (let world (Write! world sink (Key '('table (String '"Output"))) values '('('mode 'append))))
      (return world)
    )))
    (return world)
  )))
  (let world (block '(
    (let world (CommitAll! world))
    (return world)
  )))
  (return world)
)))))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Output")))) (Void) '('('sample '('system (EvaluateAtom (ToString (block '(
    (let samplingRate (Int32 '"30"))
    (let samplingRate (Ensure samplingRate (>= samplingRate (Double '0)) (String '"Expected sampling rate to be nonnegative")))
    (let samplingRate (Ensure samplingRate (<= samplingRate (Double '100)) (String '"Sampling rate is over 100%")))
    (return samplingRate)
  )))) (EvaluateAtom (ToString (Int32 '0))))))))
  (let table2 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table2)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"key" (lambda '(row) (block '(
          (let res (Member row '"key"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"key" '"value")))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
