(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table1 (Right! x))
  (let values (block '(
    (let select (block '(
      (let core table1)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"key" (lambda '(row) (block '(
          (let res (Member row '"key"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"subkey" (lambda '(row) (block '(
          (let res (Member row '"subkey"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value1" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value2" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true) (Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"subkey")) (PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"value1")) (PersistableRepr (Member row '"value2"))))))
    (return select)
  )))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"skv1v2") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table3 (Right! x))
  (let values (block '(
    (let select (block '(
      (let core table3)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"key" (lambda '(row) (block '(
          (let res (Member row '"key"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"subkey" (lambda '(row) (block '(
          (let res (Member row '"subkey"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value1" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value2" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true) (Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"subkey")) (PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"value2")) (PersistableRepr (Member row '"value1"))))))
    (return select)
  )))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"skv2v1") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table5 (Right! x))
  (let values (block '(
    (let select (block '(
      (let core table5)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"key" (lambda '(row) (block '(
          (let res (Member row '"key"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"subkey" (lambda '(row) (block '(
          (let res (Member row '"subkey"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value1" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))) (SqlProjectItem projectCoreType '"value2" (lambda '(row) (block '(
          (let res (Member row '"value"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true) (Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"subkey")) (PersistableRepr (Member row '"value1")) (PersistableRepr (Member row '"value2"))))))
    (return select)
  )))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"ksv1v2") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (TempTable '"skv1v2") (TempTable '"skv1v2")) (Void) '()))
  (let table6 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table6)
          (let core (RemoveSystemMembers core))
          (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) '((Bool 'true) (Bool 'true)) (lambda '(row) (SqlExtractKey row (lambda '(row) '((PersistableRepr (Member row '"value1")) (PersistableRepr (Member row '"value2")))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (lambda '(key stream) (AsStruct '('key key) '('summ (Collect (Condense stream (Nothing (OptionalType (DataType 'String))) (lambda '(item state) (Bool 'False)) (lambda '(item state) (Coalesce state (Just item)))))))) (lambda '(row) (Member row '"value1")))))))
          (return core)
        )))
        (return select)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"summ"))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"ksv1v2") (Void) '()))
  (let table7 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table7)
          (let core (RemoveSystemMembers core))
          (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) '((Bool 'true) (Bool 'true)) (lambda '(row) (SqlExtractKey row (lambda '(row) '((PersistableRepr (Member row '"value2")) (PersistableRepr (Member row '"value1")))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (lambda '(key stream) (AsStruct '('key key) '('summ (Collect (Condense stream (Nothing (OptionalType (DataType 'String))) (lambda '(item state) (Bool 'False)) (lambda '(item state) (Coalesce state (Just item)))))))) (lambda '(row) (Member row '"value1")))))))
          (return core)
        )))
        (return select)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"summ"))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (TempTable '"skv1v2") (TempTable '"skv2v1")) (Void) '()))
  (let table8 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table8)
          (let core (RemoveSystemMembers core))
          (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) '((Bool 'true) (Bool 'true)) (lambda '(row) (SqlExtractKey row (lambda '(row) '((PersistableRepr (Member row '"value1")) (PersistableRepr (Member row '"value2")))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (lambda '(key stream) (AsStruct '('key key) '('summ (Collect (Condense stream (Nothing (OptionalType (DataType 'String))) (lambda '(item state) (Bool 'False)) (lambda '(item state) (Coalesce state (Just item)))))))) (lambda '(row) (Member row '"value1")))))))
          (return core)
        )))
        (return select)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"summ"))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (TempTable '"skv1v2") (TempTable '"ksv1v2")) (Void) '()))
  (let table9 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table9)
          (let core (RemoveSystemMembers core))
          (let core (AutoDemux (PartitionsByKeys core (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) '((Bool 'true) (Bool 'true)) (lambda '(row) (SqlExtractKey row (lambda '(row) '((PersistableRepr (Member row '"value1")) (PersistableRepr (Member row '"value2")))))) (lambda '(partitionStream) (SqlReduce partitionStream (lambda '(row) (SqlExtractKey row (lambda '(row) '((Member row '"key") (Member row '"subkey"))))) (lambda '(key stream) (AsStruct '('key key) '('summ (Collect (Condense stream (Nothing (OptionalType (DataType 'String))) (lambda '(item state) (Bool 'False)) (lambda '(item state) (Coalesce state (Just item)))))))) (lambda '(row) (Member row '"value1")))))))
          (return core)
        )))
        (return select)
      )))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let res row)
          (return res)
        ))) '()))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select '((Bool 'true) (Bool 'true)) (lambda '(row) '((PersistableRepr (Member row '"key")) (PersistableRepr (Member row '"summ"))))))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
