(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableConcat (Key '('table (String '"Input")))) (Void) '()))
  (let table1 (Right! x))
  (let values (block '(
    (let select (block '(
      (let core table1)
      (let core (AssumeColumnOrderPartial (Aggregate core '() '('('Count0 (Apply (bind aggregate_module '"count_traits_factory") (TypeOf core) (lambda '(row) (PersistableRepr (Void)))))) '()) '()))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (SqlProject core '((SqlProjectItem projectCoreType '"count" (lambda '(row) (block '(
          (let res (Member row 'Count0))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let values (Unordered values))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"foo") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(let subquerynode0 (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"foo") (Void) '()))
  (let table2 (Right! x))
  (return '(world (block '(
    (let select (block '(
      (let core table2)
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"count" (lambda '(row) (block '(
          (let res (Member row '"count"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  ))))
)))
(let world (Nth subquerynode0 '0))
(let subquery0 (Nth subquerynode0 '1))
(let world (If! world (Coalesce (">" (Member (SqlAccess 'dict (Take subquery0 (Uint64 '1)) (Uint64 '0)) 'count) (Int32 '"1")) (Bool 'false)) (block '(
  (let world (block '(
    (let output (block '(
      (let select (block '(
        (let core (AsList (AsStruct)))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
            (let res (Int32 '"1"))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      )))
      (return select)
    )))
    (let output (Unordered output))
    (let world (block '(
      (let result_sink (DataSink 'result))
      (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"column0")))))
      (return (Commit! world result_sink))
    )))
    (return world)
  )))
  (return world)
))))
(let world (If! world (Coalesce (Not (">" (Member (SqlAccess 'dict (Take subquery0 (Uint64 '1)) (Uint64 '0)) 'count) (Int32 '"1"))) (Bool 'false)) (block '(
  (let world (block '(
    (let output (block '(
      (let select (block '(
        (let core (AsList (AsStruct)))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
            (let res (Int32 '"2"))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      )))
      (return select)
    )))
    (let output (Unordered output))
    (let world (block '(
      (let result_sink (DataSink 'result))
      (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"column0")))))
      (return (Commit! world result_sink))
    )))
    (return world)
  )))
  (return world)
))))
(let world (If! world (Coalesce (">" (Member (SqlAccess 'dict (Take subquery0 (Uint64 '1)) (Uint64 '0)) 'count) (Int32 '"1")) (Bool 'false)) (block '(
  (let world (block '(
    (let output (block '(
      (let select (block '(
        (let core (AsList (AsStruct)))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
            (let res (Int32 '"3"))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      )))
      (return select)
    )))
    (let output (Unordered output))
    (let world (block '(
      (let result_sink (DataSink 'result))
      (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"column0")))))
      (return (Commit! world result_sink))
    )))
    (return world)
  )))
  (return world)
)) (block '(
  (let world (block '(
    (let output (block '(
      (let select (block '(
        (let core (AsList (AsStruct)))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
            (let res (Int32 '"4"))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      )))
      (return select)
    )))
    (let output (Unordered output))
    (let world (block '(
      (let result_sink (DataSink 'result))
      (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"column0")))))
      (return (Commit! world result_sink))
    )))
    (return world)
  )))
  (return world)
))))
(let world (If! world (Coalesce (Not (">" (Member (SqlAccess 'dict (Take subquery0 (Uint64 '1)) (Uint64 '0)) 'count) (Int32 '"1"))) (Bool 'false)) (block '(
  (let world (block '(
    (let output (block '(
      (let select (block '(
        (let core (AsList (AsStruct)))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
            (let res (Int32 '"5"))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      )))
      (return select)
    )))
    (let output (Unordered output))
    (let world (block '(
      (let result_sink (DataSink 'result))
      (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"column0")))))
      (return (Commit! world result_sink))
    )))
    (return world)
  )))
  (return world)
)) (block '(
  (let world (block '(
    (let output (block '(
      (let select (block '(
        (let core (AsList (AsStruct)))
        (let core (PersistableRepr (block '(
          (let projectCoreType (TypeOf core))
          (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"column0" (lambda '(row) (block '(
            (let res (Int32 '"6"))
            (return res)
          )))))))
          (return core)
        ))))
        (return core)
      )))
      (return select)
    )))
    (let output (Unordered output))
    (let world (block '(
      (let result_sink (DataSink 'result))
      (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('"column0")))))
      (return (Commit! world result_sink))
    )))
    (return world)
  )))
  (return world)
))))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
