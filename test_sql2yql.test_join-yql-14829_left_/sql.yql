(
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (Configure! world (DataSource '"yt" '"$all") '"Attr" '"joinenablestarjoin" '"true"))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"id" (lambda '(row) (block '(
          (let res (Just (String '"xxx")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (Member row '"id")))))
    (return select)
  )))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"x") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"id" (lambda '(row) (block '(
          (let res (Just (String '"yyy")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (Member row '"id")))))
    (return select)
  )))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"y") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let values (block '(
    (let select (block '(
      (let core (AsList (AsStruct)))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"id" (lambda '(row) (block '(
          (let res (Just (String '"aaa")))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (Sort select (Bool 'true) (lambda '(row) (PersistableRepr (Member row '"id")))))
    (return select)
  )))
  (let world (block '(
    (let sink (DataSink '"yt" '"plato"))
    (let world (Write! world sink (TempTable '"a") values '('('mode 'append))))
    (return world)
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(let subquerynode0 (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"x") (Void) '()))
  (let table3 (Right! x))
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"y") (Void) '()))
  (let table4 (Right! x))
  (return '(world (block '(
    (let select (block '(
      (let core (EquiJoin '((RemoveSystemMembers table3) '"x") '((RemoveSystemMembers table4) '"y") '('Left '"x" '"y" '('"x" '"id") '('"y" '"id") '('('left 'any) '('right 'any))) '()))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"id" (lambda '(row) (block '(
          (let res (SqlColumn row '"id" '"x"))
          (return res)
        )))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  ))))
)))
(let world (Nth subquerynode0 '0))
(let subquery0 (Nth subquerynode0 '1))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (TempTable '"a") (Void) '()))
  (let table5 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core (EquiJoin '((RemoveSystemMembers table5) '"a") '(subquery0 '"b") '('Left '"a" '"b" '('"a" '"id") '('"b" '"id") '('('left 'any) '('right 'any))) '()))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (OrderedSqlProject core '((SqlProjectStarItem projectCoreType '"" (lambda '(row) (block '(
          (let flatSameKeys row)
          (let flatSameKeys (CoalesceMembers flatSameKeys '('a.id 'b.id)))
          (let row flatSameKeys)
          (let res (DivePrefixMembers row '('"a." '"b.")))
          (return res)
        ))) '('('divePrefix '('"a." '"b.")))))))
        (return core)
      ))))
      (return core)
    )))
    (let select (RemoveSystemMembers select))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
