(
(let scriptudf0 (String '@@
def f(s):
  return True
@@))
(import aggregate_module '"/lib/yql/aggregate.yql")
(import window_module '"/lib/yql/window.yql")
(import core_module '"/lib/yql/core.yql")
(let world (Configure! world (DataSource '"yt" '"$all") '"Attr" '"folderinlineitemslimit" '"0"))
(let subquerynode0 (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrFolder '"" '"") (Void) '()))
  (let table0 (Right! x))
  (return '(world (block '(
    (let select (block '(
      (let core (block '(
        (let select (block '(
          (let core table0)
          (let core (OrderedFilter core (lambda '(row) (Coalesce (And ("==" (Member row '"Type") (String '"table")) (Apply (ScriptUdf 'Python3 '"f" (CallableType '() '((DataType 'Bool)) '((DataType 'String))) scriptudf0) (Member row '"Path"))) (Bool 'false)))))
          (let core (PersistableRepr (block '(
            (let projectCoreType (TypeOf core))
            (let core (OrderedSqlProject core '((SqlProjectItem projectCoreType '"Path" (lambda '(row) (block '(
              (let res (Member row '"Path"))
              (return res)
            )))))))
            (return core)
          ))))
          (return core)
        )))
        (let select (Take select (Coalesce (Int32 '"30") (Uint64 '18446744073709551615))))
        (return select)
      )))
      (let core (AssumeColumnOrderPartial (Aggregate core '() '('('AggregateList0 (Apply (bind aggregate_module '"list2_traits_factory") (TypeOf core) (lambda '(row) (Member row '"Path")) (Uint64 '0)))) '()) '()))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (SqlProject core '((SqlProjectItem projectCoreType '"" (lambda '(row) (block '(
          (let res (Member row 'AggregateList0))
          (return res)
        ))) '('('autoName))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  ))))
)))
(let world (Nth subquerynode0 '0))
(let subquery0 (Nth subquerynode0 '1))
(let world (block '(
  (let x (Read! world (DataSource '"yt" '"plato") (MrTableEach (Key '('table (EvaluateExpr (EnsureType (Coalesce (SingleMember (SqlAccess 'dict (Take subquery0 (Uint64 '1)) (Uint64 '0))) (List (ListType (DataType 'String)))) (ListType (DataType 'String))))))) (Void) '('('"ignorenonexisting") '('"warnnonexisting"))))
  (let table1 (Right! x))
  (let output (block '(
    (let select (block '(
      (let core table1)
      (let core (AssumeColumnOrderPartial (Aggregate core '() '('('Count0 (AggApply 'count_all (ListItemType (TypeOf core)) (lambda '(row) (PersistableRepr (Void)))))) '()) '()))
      (let core (PersistableRepr (block '(
        (let projectCoreType (TypeOf core))
        (let core (SqlProject core '((SqlProjectItem projectCoreType '"" (lambda '(row) (block '(
          (let res (Member row 'Count0))
          (return res)
        ))) '('('autoName))))))
        (return core)
      ))))
      (return core)
    )))
    (return select)
  )))
  (let output (Unordered output))
  (let world (block '(
    (let result_sink (DataSink 'result))
    (let world (Write! world result_sink (Key) output '('('type) '('autoref) '('columns '('('auto))))))
    (return (Commit! world result_sink))
  )))
  (return world)
)))
(let world (block '(
  (let world (CommitAll! world))
  (return world)
)))
(return world)
)
